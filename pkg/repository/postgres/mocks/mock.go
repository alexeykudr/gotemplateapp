// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	backend "backend"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockAuthorization) AddUser(ctx context.Context, user backend.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockAuthorizationMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockAuthorization)(nil).AddUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockAuthorization) GetUser(ctx context.Context, username, password string) (backend.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username, password)
	ret0, _ := ret[0].(backend.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthorizationMockRecorder) GetUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthorization)(nil).GetUser), ctx, username, password)
}

// UpdateUserPassword mocks base method.
func (m *MockAuthorization) UpdateUserPassword(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockAuthorizationMockRecorder) UpdateUserPassword(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockAuthorization)(nil).UpdateUserPassword), ctx, email)
}

// MockStuff is a mock of Stuff interface.
type MockStuff struct {
	ctrl     *gomock.Controller
	recorder *MockStuffMockRecorder
}

// MockStuffMockRecorder is the mock recorder for MockStuff.
type MockStuffMockRecorder struct {
	mock *MockStuff
}

// NewMockStuff creates a new mock instance.
func NewMockStuff(ctrl *gomock.Controller) *MockStuff {
	mock := &MockStuff{ctrl: ctrl}
	mock.recorder = &MockStuffMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStuff) EXPECT() *MockStuffMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockStuff) GetAllUsers(ctx context.Context) ([]backend.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]backend.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockStuffMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockStuff)(nil).GetAllUsers), ctx)
}
